---
description: Directus MCP server implementation guidance
globs: 
alwaysApply: true
---
 # Directus MCP Server Implementation Guidelines

## API INTERACTION PATTERNS

- When interacting with Directus API endpoints, always use the exact request format specified in the Directus 11.5.1 documentation
- For collection creation, ensure the request includes properly structured `meta` and `schema` objects
- For field creation, use the `/fields/{collection}` endpoint with properly formatted `meta` and `schema` objects
- Never attempt to modify system collections (those prefixed with `directus_`)
- Always validate admin token permissions before attempting schema modifications
- Use the Directus schema API (`/schema/apply`) for bulk operations rather than individual endpoints

## ERROR HANDLING

- Implement detailed error handling for all Directus API interactions
- Always extract and log the full error response from Directus, including status code and error details
- Provide specific error messages for common issues (403 Forbidden, 404 Not Found, etc.)
- Include request details in error logs (URL, method, request body) to aid debugging
- Use typed error responses with proper TypeScript interfaces for Directus error structures
- Every new tool or enhancement must incorporate:
    - Comprehensive, structured logging with contextual details for easier troubleshooting, including specifics like request IDs, affected endpoints, and security warnings when applicable.
    - Centralized permission and parameter validations, ensuring these checks are uniformly implemented across all operations.
    - Consistent environment and configuration checks (for dev, test, prod) prior to initiating any Directus operations.


## TESTING AND DIAGNOSTICS

- Implement diagnostic tools that verify connectivity, authentication, and permissions
- Test actual operations with temporary test collections rather than just checking endpoints
- Clean up test resources after diagnostic tests
- Log detailed information about request formats and responses during testing
- Verify admin token permissions explicitly before attempting schema operations

## CODE ORGANIZATION

- Keep implementation simple with a single, well-documented approach for each operation
- Avoid complex fallback logic that makes debugging difficult
- Standardize error handling across all tools
- Use TypeScript interfaces to define Directus API request and response structures
- Separate core functionality from diagnostic/testing tools

## DIRECTUS VERSION SPECIFICS

- Directus 11.5.1 uses a policy-based permission system
- Admin users are governed by policies that must be properly configured
- Schema operations require specific permissions that may not be enabled by default
- The request format for collection and field creation is version-specific
- Always verify the exact API format for your specific Directus version

## SECURITY CONSIDERATIONS

- Store admin tokens securely and never expose them in client-side code
- Validate all input before passing to Directus API endpoints
- Implement proper error handling to avoid exposing sensitive information
- Follow the MCP security principles for user consent and control
- Provide clear documentation of security implications for all operations
