
## PROJECT OVERVIEW
This project aims to build a Directus Multi-purpose Control Panel (MCP) server.  The server will provide a set of tools to interact with a Directus instance.  A pre-existing Directus instance is used for testing at https://directus-dev.learnwith.cc and a local instance at `http://localhost:8077`.

## CODE STYLE
TypeScript will be used.  Adhere to standard TypeScript conventions.  Further style guidelines will be added as needed.

## FOLDER ORGANIZATION
The project follows this structure:

```
mcp-directus
├── src
│   ├── tools
│   │   ├── createItem.ts
│   │   ├── deleteItem.ts
│   │   ├── getItem.ts
│   │   ├── getItems.ts
│   │   ├── searchItems.ts
│   │   ├── updateItem.ts
│   │   └── uploadFile.ts
│   ├── directusMCPServer.ts
│   └── index.ts
├── Building a Directus MCP Server_ Comprehensive Impl.md
├── claude_desktop_config.json
├── package.json
└── tsconfig.json
```

## TECH STACK
- Node.js
- Express.js
- TypeScript
- Axios
- Dotenv
- Nodemon
- ts-node
- @types/node
- @types/express
- Rationale:  Chosen for simple server implementation, type safety, Directus integration, environment isolation, and development agility.  See 2025-03-12_10-13-tech-stack-rationale-and-components-overview.md for details.


## PROJECT-SPECIFIC STANDARDS
- All interactions with the Directus API should use the provided `directusClient` instance in `DirectusMCPServer`.
- Error handling should be implemented in each tool function, logging errors to the console and returning appropriate error responses.
- Tool descriptions and parameter definitions should be provided in the `listTools` function.
- Special handling for system collections (`directus_users`, `directus_files`, `directus_roles`) using appropriate endpoints (`/users`, `/files`, `/roles`).
- **New Requirement (2025-03-12):** Add functionality to create Directus collections.  This includes single collections and collections with relationships (M2M or M2O).  Further details on implementation will be added as needed.


## WORKFLOW & RELEASE RULES
- Utilize standard Gitflow branching strategy.
- All code changes must be reviewed before merging into main branch.
- Release process will be defined later.
- Build and run scripts added to `package.json`:  `npm run build`, `npm run start`, `npm run dev`.
- Build process confirmed functional on 2025-03-12.
- **Troubleshooting Build Errors:** If `tsc` command is not found, ensure TypeScript is installed globally or locally and dependencies are installed using `npm install`.  A successful build creates a `dist` directory containing compiled JavaScript files. Running `npm start` starts the server; check server logs for errors.  Running the server with `NODE_DEBUG=http,net node dist/index.js > server.log 2>&1 &` provides verbose debugging output.  To run with verbose debug output, use `NODE_DEBUG=http,net node dist/index.js > server.log 2>&1 &`.

## REFERENCE EXAMPLES
- Refer to the `Building a Directus MCP Server_ Comprehensive Impl.md` document for detailed implementation steps.
- 2025-03-12_10-13-tech-stack-rationale-and-components-overview.md details the tech stack rationale.
- 2025-03-12_10-28-building-directus-project-with-updated-credentials.md details the troubleshooting steps for building and running the project.


## PROJECT DOCUMENTATION & CONTEXT SYSTEM
- Documentation will be maintained in Markdown format.
- Version updates will be tracked in this `.cursorrules` file.
- Project scaffolding and initial implementation completed on 2025-03-11.
- Version 1.0.0 initial implementation completed on 2025-03-12.
- Example `claude_desktop_config.json` added on 2025-03-12 for Claude Desktop integration.
- Collection creation testing initiated on 2025-03-12.


## DEBUGGING
- Utilize `console.log` for debugging purposes.  More sophisticated debugging tools may be added later.
- Nodemon will be used for development to automatically restart the server on code changes.
- For detailed debugging, run the server with `NODE_DEBUG=http,net node dist/index.js > server.log 2>&1 &` to capture verbose output in `server.log`.

## FINAL DOs AND DON'Ts
- **DO** follow the folder structure and coding standards outlined in this file.
- **DO** use TypeScript and adhere to its conventions.
- **DO** write comprehensive unit tests (to be added later).
- **DON'T** commit unnecessary files or changes.
- **DON'T** hardcode sensitive information like API keys directly into the code; use environment variables instead.
- **DO** use the `.env` file to store environment variables like `PORT`, `DIRECTUS_URL`, and `DIRECTUS_ADMIN_TOKEN`.  Example `.env` file:

```
PORT=3000
DIRECTUS_URL=https://directus-dev.learnwith.cc
DIRECTUS_ADMIN_TOKEN=your_admin_token_here
```
- **DO** refer to the `README.md` for comprehensive project information and usage instructions.
- Example `claude_desktop_config.json`:

```json
{
  "mcpServers": {
    "directus-mcp": {
      "url": "http://localhost:3000/mcp/v1",
      "description": "Directus CMS Integration",
      "enabled": true
    }
  }
}
```